import { createSlice } from "@reduxjs/toolkit";

const productSlice = createSlice({
    name:'Products',
    initialState:{
        loading:false,
        product:{},
        isReviewSubmitted:false,
        isProductCreated:false,
        isProductDeleted:false,
        isProductUpdated:false,
        isReviewDeleted:false,
        reviews:[]
    },
    reducers:{
        productRequest(state,action){
            return {
                ...state,
                loading:true
            }
        },
        productSuccess(state,action){
            return{
                ...state,
                loading:false,
                product:action.payload.product
            }
        },
        productFailure(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        createReviewRequest(state,action){
            return {
                ...state,
                loading:true
            }
        },
        createReviewSuccess(state,action){
            return{
                ...state,
                loading:false,
                isReviewSubmitted:true
            }
        },
        createReviewFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        clearProduct(state,action){
            return{
                ...state,
                product:{}
            }
        },
        clearReviewSubmitted(state,action){
            return{
                ...state,
                isReviewSubmitted:false
            }
        },
        clearError(state,action){
            return{
                ...state,
                error:null
            }
        },
        
        newProductRequest(state,action){
            return {
                ...state,
                loading:true
            }
        },
        newProductSuccess(state,action){
            return{
                loading:false,
                product:action.payload.product,
                isProductCreated:true
            }
        },
        newProductFailure(state,action){
            return{
                loading:false,
                error:action.payload,
                isProductCreated:false
            }
        },
        clearProductCreated(state,action){
            return{
                ...state,
                isProductCreated:false
            }
        },
        updateProductRequest(state,action){
            return {
                ...state,
                loading:true
            }
        },
        updateProductSuccess(state,action){
            return{
                ...state,
                loading:false,
                product:action.payload.product,
                isProductUpdated:true
            }
        },
        updateProductFailure(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        clearProductUpdated(state,action){
            return{
                ...state,
                isProductUpdated:false
            }
        },
        deleteProductRequest(state,action){
            return {
                ...state,
                loading:true
            }
        },
        deleteProductSuccess(state,action){
            return{
                ...state,
                loading:false,
                isProductDeleted:true
            }
        },
        deleteProductFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        clearProductDeleted(state,action){
            return{
                ...state,
                isProductDeleted:false
            }
        },
        reviewsRequest(state,action){
            return {
                ...state,
                loading:true
            }
        },
        reviewsSuccess(state,action){
            return{
                ...state,
                loading:false,
                reviews:action.payload.reviews
            }
        },
        reviewsFailure(state,action){
            return{
                ...state,
                loading:false,
                error:action.payload
            }
        },
        deleteReviewRequest(state,action){
            return {
                ...state,
                loading:true
            }
        },
        deleteReviewSuccess(state,action){
            return{
                ...state,
                loading:false,
                isReviewDeleted:true
            }
        },
        deleteReviewFailure(state,action){
            return{
                loading:false,
                error:action.payload
            }
        },
        clearReviewDeleted(state,action){
            return{
                ...state,
                isReviewDeleted:false
            }
        }
    }
})

const {actions,reducer} = productSlice;
export const {productRequest,productSuccess,productFailure,newProductRequest,newProductSuccess,newProductFailure,clearProductCreated,
    clearError,clearProduct,
    createReviewRequest,createReviewSuccess,createReviewFailure,clearReviewSubmitted,
deleteProductRequest,deleteProductSuccess,deleteProductFailure,clearProductDeleted,
reviewsRequest,reviewsSuccess,reviewsFailure,deleteReviewRequest,deleteReviewSuccess,deleteReviewFailure,clearReviewDeleted,
updateProductRequest,updateProductSuccess,updateProductFailure,clearProductUpdated} = actions;
export default reducer;